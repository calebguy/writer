// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This may need to change, we need a model where things can be 'created'
// in the DB and then verified onchain by the listeners


// Currently we map the ID from the factory to the database ID which maybe is not the best idea
// I'd like to be able to create 'soft' data into the database as soon as the user POSTs
// and then updated with the onchain data later. That way we can still use the soft data for
// the frontend immediately, and then fill in the hard data async.

model Writer {
  id Int @id @default(autoincrement())
  title String
  address String? @unique
  storageAddress String? @unique
  admin String
  managers String[]
  onChainId BigInt? @unique
  createdAtHash String?
  createdAtBlock BigInt?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entries Entry[]
  transactionId String? @unique
  transaction SyndicateTransaction? @relation(fields: [transactionId], references: [id])
}

model Entry {
  id Int @id @default(autoincrement())
  totalChunks Int
  receivedChunks Int
  exists Boolean
  onChainId BigInt? @unique
  createdAtHash String?
  createdAtBlock BigInt?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @note TODO: shouldn't we reference the internal ID here
  writerId Int
  writer Writer @relation(fields: [writerId], references: [id])
  chunks Chunk[]
  transactionId String? @unique
  transaction SyndicateTransaction? @relation(fields: [transactionId], references: [id])
}

model Chunk {
  id Int @id @default(autoincrement())
  index Int
  author String
  compressionAlgorithm String
  compressedContent String
  decompressedContent String
  createdAtHash String?
  createdAtBlock BigInt?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entryId Int
  entry Entry @relation(fields: [entryId], references: [id])
  transactionId String? @unique
  transaction SyndicateTransaction? @relation(fields: [transactionId], references: [id])
}

enum TransactionStatus {
  PENDING
  PROCESSED
  SUBMITTED
  CONFIRMED
  PAUSED
  ABANDONED
}

model SyndicateTransaction {
  id String @id @default(uuid())
  chainId BigInt
  blockNumber BigInt?
  hash String? @unique
  projectId String
  status TransactionStatus @default(PENDING)
  functionSignature String
  args Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  writers Writer[]
  entries Entry[]
  chunks Chunk[]
}
