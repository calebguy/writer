// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Writer {
  id Int @id @default(autoincrement())
  title String
  address String? @unique
  storageAddress String? @unique
  admin String
  managers String[]
  onChainId BigInt? @unique
  createdAtHash String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entries Entry[]
  transactionId String? @unique
  transaction SyndicateTransaction? @relation(fields: [transactionId], references: [id])
}

model Entry {
  id Int @id @default(autoincrement())
  exists Boolean
  onChainId BigInt?
  createdAtHash String?
  content String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  writerId Int
  writer Writer @relation(fields: [writerId], references: [id])
  transactionId String? @unique
  transaction SyndicateTransaction? @relation(fields: [transactionId], references: [id])
  @@unique([onChainId, writerId])
}

enum TransactionStatus {
  PENDING
  PROCESSED
  SUBMITTED
  CONFIRMED
  PAUSED
  ABANDONED
}

model SyndicateTransaction {
  id String @id @default(uuid())
  chainId BigInt
  blockNumber BigInt?
  hash String? @unique
  projectId String
  status TransactionStatus @default(PENDING)
  functionSignature String
  args Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  writers Writer[]
  entries Entry[]
}
